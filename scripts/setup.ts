import { db } from '../server/db';
import { sql } from 'drizzle-orm';
import { generateCustomID } from '../shared/utils/generateCustomID';

console.log('üîß Configurando IA.TEX...');

async function setupSystem() {
    try {
        console.log('üì° Testando conex√£o com Supabase...');

        // Teste de conex√£o
        const result = await db.execute(sql`SELECT NOW() as current_time`);
        console.log('‚úÖ Conex√£o estabelecida:', result[0]);

        // Verificar tabelas existentes
        console.log('üìã Verificando tabelas...');
        const tables = await db.execute(sql`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
      ORDER BY table_name
    `);

        console.log('üìä Tabelas encontradas:', tables.length);
        tables.forEach((table: any) => {
            console.log(`  - ${table.table_name}`);
        });

        // Testar gera√ß√£o de IDs
        console.log('üÜî Testando gera√ß√£o de IDs...');

        const testOrderID = await generateCustomID('PED', 'orders');
        const testClientID = await generateCustomID('CLI', 'clients');
        const testModelID = await generateCustomID('MOD', 'models');

        console.log('‚úÖ IDs gerados:');
        console.log(`  - Pedido: ${testOrderID}`);
        console.log(`  - Cliente: ${testClientID}`);
        console.log(`  - Modelo: ${testModelID}`);

        // Verificar configura√ß√µes do sistema
        console.log('‚öôÔ∏è Verificando configura√ß√µes...');

        const envVars = {
            NODE_ENV: process.env.NODE_ENV,
            SUPABASE_URL: process.env.SUPABASE_URL ? '‚úÖ Configurado' : '‚ùå N√£o configurado',
            SUPABASE_DATABASE_URL: process.env.SUPABASE_DATABASE_URL ? '‚úÖ Configurado' : '‚ùå N√£o configurado',
            OPENAI_API_KEY: process.env.OPENAI_API_KEY ? '‚úÖ Configurado' : '‚ö†Ô∏è Opcional',
            SESSION_SECRET: process.env.SESSION_SECRET ? '‚úÖ Configurado' : '‚ùå N√£o configurado'
        };

        console.log('üìù Vari√°veis de ambiente:');
        Object.entries(envVars).forEach(([key, value]) => {
            console.log(`  - ${key}: ${value}`);
        });

        console.log('üéâ Setup conclu√≠do com sucesso!');
        console.log('');
        console.log('üìã Pr√≥ximos passos:');
        console.log('  1. Configure as vari√°veis de ambiente no .env');
        console.log('  2. Execute: npm run dev');
        console.log('  3. Acesse: http://localhost:3000');
        console.log('  4. Para deploy: configure Vercel/Railway');

    } catch (error) {
        console.error('‚ùå Erro no setup:', error);
        process.exit(1);
    }
}

setupSystem(); 